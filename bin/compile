#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # dont ignore exit codes when piping output
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Configure directories

mkdir -p $1 $2 $3 # Ensure dirs are present

build_dir=$(cd $1 && pwd)
cache_dir=$(cd $2 && pwd)
env_path=$(cd $3 && pwd)
build_pack_dir=$(cd $(dirname $(dirname $0)); pwd)

source ${build_pack_dir}/lib/build.sh

load_config
export_env_vars
export_mix_env

# what is the default release name? or do we keep it empty?
RELEASE_ENV=${MIX_ENV}
DEFAULT_RELEASE_OPTIONS=""
RELEASE_OPTIONS=${GIGALIXIR_RELEASE_OPTIONS:-$DEFAULT_RELEASE_OPTIONS}

cd $build_dir/$app_relative_path

if [ "$GIGALIXIR_SHOULD_HOT_UPGRADE" = "true" ]; then
  echo "Elixir core releases does not support hot upgrades out of the box yet. Try distillery instead."
  exit 1
else
  mix release $RELEASE_OPTIONS
fi

DIRS=(`ls -Ad _build/${RELEASE_ENV}/rel/*/`)
if [ ${#DIRS[@]} -ne 1 ]; then
  echo "Did not find exactly 1 directory under _build/${RELEASE_ENV}/rel/."
  exit 1;
fi
APP=`echo $DIRS | cut -d '/' -f 4`
DIRS=(`ls -Ad _build/${RELEASE_ENV}/rel/$APP/releases/*/`)
if [ ${#DIRS[@]} -ne 1 ]; then
  echo "Did not find exactly 1 directory under _build/${RELEASE_ENV}/rel/$APP/releases/."
  exit 1;
fi
VERSION=`echo $DIRS | cut -d '/' -f 6`

mkdir -p _build/${RELEASE_ENV}/rel/$APP/.profile.d

# heroku-buildpack-apt support
if [ -d $build_dir/.apt ] && [ -f $build_dir/.profile.d/000_apt.sh ]; then
  cp -r $build_dir/.apt _build/${RELEASE_ENV}/rel/$APP/.apt
  cp $build_dir/.profile.d/000_apt.sh _build/${RELEASE_ENV}/rel/$APP/.profile.d/000_apt.sh
fi

# copy over envvar setup for phoenix
if [ -f .profile.d/phoenix_static_buildpack_env.sh ]; then
  cp .profile.d/phoenix_static_buildpack_env.sh _build/${RELEASE_ENV}/rel/$APP/.profile.d/
fi

# temporary fix for clamav setup
if [ -f "${build_dir}/clamd.conf" ]; then
  cp "${build_dir}/clamd.conf" "_build/${RELEASE_ENV}/rel/${APP}/"
fi

copy_static_files .gigalixir/static "_build/${RELEASE_ENV}/rel/${APP}/"

# create tarball
mkdir -p $cache_dir/out
rm -f $cache_dir/out/*
TARBALL="$cache_dir/out/$APP-$VERSION.tar.gz"
delete_broken_symlinks "_build/${RELEASE_ENV}/rel/${APP}/"
tar zcf $TARBALL --dereference -C _build/${RELEASE_ENV}/rel/$APP/ .

# so it can be deleted outside of container
chmod +w $cache_dir/out/$APP-$VERSION.tar.gz

# determine capabilities of this slug
# can eval run Elixir?
output_section "Determining release capabilities"
capabilities_file="$cache_dir/out/capabilities"
echo '{"distillery": {"eval": "elixir", "rpc": "no_print", "start_command": "start", "remote_command": "remote"}}' > $capabilities_file

# so it can be deleted outside of container
chmod +w $cache_dir/out/capabilities
